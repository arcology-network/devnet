/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface L1FeeVaultInterface extends utils.Interface {
  functions: {
    "MIN_WITHDRAWAL_AMOUNT()": FunctionFragment;
    "RECIPIENT()": FunctionFragment;
    "WITHDRAWAL_NETWORK()": FunctionFragment;
    "totalProcessed()": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_WITHDRAWAL_AMOUNT"
      | "RECIPIENT"
      | "WITHDRAWAL_NETWORK"
      | "totalProcessed"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_WITHDRAWAL_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RECIPIENT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_NETWORK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAWAL_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RECIPIENT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_NETWORK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Withdrawal(uint256,address,address)": EventFragment;
    "Withdrawal(uint256,address,address,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "Withdrawal(uint256,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Withdrawal(uint256,address,address,uint8)"
  ): EventFragment;
}

export interface Withdrawal_uint256_address_address_EventObject {
  value: BigNumber;
  to: string;
  from: string;
}
export type Withdrawal_uint256_address_address_Event = TypedEvent<
  [BigNumber, string, string],
  Withdrawal_uint256_address_address_EventObject
>;

export type Withdrawal_uint256_address_address_EventFilter =
  TypedEventFilter<Withdrawal_uint256_address_address_Event>;

export interface Withdrawal_uint256_address_address_uint8_EventObject {
  value: BigNumber;
  to: string;
  from: string;
  withdrawalNetwork: number;
}
export type Withdrawal_uint256_address_address_uint8_Event = TypedEvent<
  [BigNumber, string, string, number],
  Withdrawal_uint256_address_address_uint8_EventObject
>;

export type Withdrawal_uint256_address_address_uint8_EventFilter =
  TypedEventFilter<Withdrawal_uint256_address_address_uint8_Event>;

export interface L1FeeVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1FeeVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    RECIPIENT(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAWAL_NETWORK(overrides?: CallOverrides): Promise<[number]>;

    totalProcessed(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  RECIPIENT(overrides?: CallOverrides): Promise<string>;

  WITHDRAWAL_NETWORK(overrides?: CallOverrides): Promise<number>;

  totalProcessed(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    RECIPIENT(overrides?: CallOverrides): Promise<string>;

    WITHDRAWAL_NETWORK(overrides?: CallOverrides): Promise<number>;

    totalProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Withdrawal(uint256,address,address)"(
      value?: null,
      to?: null,
      from?: null
    ): Withdrawal_uint256_address_address_EventFilter;
    "Withdrawal(uint256,address,address,uint8)"(
      value?: null,
      to?: null,
      from?: null,
      withdrawalNetwork?: null
    ): Withdrawal_uint256_address_address_uint8_EventFilter;
  };

  estimateGas: {
    MIN_WITHDRAWAL_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    RECIPIENT(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_NETWORK(overrides?: CallOverrides): Promise<BigNumber>;

    totalProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_WITHDRAWAL_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RECIPIENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAWAL_NETWORK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalProcessed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
