/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: PromiseOrValue<BigNumberish>;
    elasticityMultiplier: PromiseOrValue<BigNumberish>;
    baseFeeMaxChangeDenominator: PromiseOrValue<BigNumberish>;
    minimumBaseFee: PromiseOrValue<BigNumberish>;
    systemTxMaxGas: PromiseOrValue<BigNumberish>;
    maximumBaseFee: PromiseOrValue<BigNumberish>;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export interface EchidnaFuzzResourceMeteringInterface extends utils.Interface {
  functions: {
    "echidna_high_usage_raise_baseFee()": FunctionFragment;
    "echidna_low_usage_lower_baseFee()": FunctionFragment;
    "echidna_never_above_max_gas_limit()": FunctionFragment;
    "echidna_never_below_min_baseFee()": FunctionFragment;
    "echidna_never_exceed_max_decrease()": FunctionFragment;
    "echidna_never_exceed_max_increase()": FunctionFragment;
    "echidna_underflow()": FunctionFragment;
    "params()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "testBurn(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "echidna_high_usage_raise_baseFee"
      | "echidna_low_usage_lower_baseFee"
      | "echidna_never_above_max_gas_limit"
      | "echidna_never_below_min_baseFee"
      | "echidna_never_exceed_max_decrease"
      | "echidna_never_exceed_max_increase"
      | "echidna_underflow"
      | "params"
      | "resourceConfig"
      | "testBurn"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "echidna_high_usage_raise_baseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_low_usage_lower_baseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_never_above_max_gas_limit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_never_below_min_baseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_never_exceed_max_decrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_never_exceed_max_increase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_underflow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBurn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "echidna_high_usage_raise_baseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_low_usage_lower_baseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_never_above_max_gas_limit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_never_below_min_baseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_never_exceed_max_decrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_never_exceed_max_increase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_underflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testBurn", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface EchidnaFuzzResourceMetering extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EchidnaFuzzResourceMeteringInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    echidna_high_usage_raise_baseFee(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_low_usage_lower_baseFee(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_never_above_max_gas_limit(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_never_below_min_baseFee(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_never_exceed_max_decrease(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_never_exceed_max_increase(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    echidna_underflow(overrides?: CallOverrides): Promise<[boolean]>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    testBurn(
      _gasToBurn: PromiseOrValue<BigNumberish>,
      _raiseBaseFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  echidna_high_usage_raise_baseFee(overrides?: CallOverrides): Promise<boolean>;

  echidna_low_usage_lower_baseFee(overrides?: CallOverrides): Promise<boolean>;

  echidna_never_above_max_gas_limit(
    overrides?: CallOverrides
  ): Promise<boolean>;

  echidna_never_below_min_baseFee(overrides?: CallOverrides): Promise<boolean>;

  echidna_never_exceed_max_decrease(
    overrides?: CallOverrides
  ): Promise<boolean>;

  echidna_never_exceed_max_increase(
    overrides?: CallOverrides
  ): Promise<boolean>;

  echidna_underflow(overrides?: CallOverrides): Promise<boolean>;

  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  testBurn(
    _gasToBurn: PromiseOrValue<BigNumberish>,
    _raiseBaseFee: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    echidna_high_usage_raise_baseFee(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_low_usage_lower_baseFee(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_never_above_max_gas_limit(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_never_below_min_baseFee(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_never_exceed_max_decrease(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_never_exceed_max_increase(
      overrides?: CallOverrides
    ): Promise<boolean>;

    echidna_underflow(overrides?: CallOverrides): Promise<boolean>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    testBurn(
      _gasToBurn: PromiseOrValue<BigNumberish>,
      _raiseBaseFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    echidna_high_usage_raise_baseFee(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_low_usage_lower_baseFee(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_never_above_max_gas_limit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_never_below_min_baseFee(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_never_exceed_max_decrease(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_never_exceed_max_increase(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    echidna_underflow(overrides?: CallOverrides): Promise<BigNumber>;

    params(overrides?: CallOverrides): Promise<BigNumber>;

    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    testBurn(
      _gasToBurn: PromiseOrValue<BigNumberish>,
      _raiseBaseFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    echidna_high_usage_raise_baseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_low_usage_lower_baseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_never_above_max_gas_limit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_never_below_min_baseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_never_exceed_max_decrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_never_exceed_max_increase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_underflow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testBurn(
      _gasToBurn: PromiseOrValue<BigNumberish>,
      _raiseBaseFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
