/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ExampleCloneInterface extends utils.Interface {
  functions: {
    "addressArg()": FunctionFragment;
    "dynBytesArg(uint64)": FunctionFragment;
    "fixedBytesArg()": FunctionFragment;
    "uint64Arg()": FunctionFragment;
    "uint8Arg()": FunctionFragment;
    "uintArg()": FunctionFragment;
    "uintArrayArg(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressArg"
      | "dynBytesArg"
      | "fixedBytesArg"
      | "uint64Arg"
      | "uint8Arg"
      | "uintArg"
      | "uintArrayArg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressArg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynBytesArg",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedBytesArg",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uint64Arg", values?: undefined): string;
  encodeFunctionData(functionFragment: "uint8Arg", values?: undefined): string;
  encodeFunctionData(functionFragment: "uintArg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uintArrayArg",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addressArg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dynBytesArg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedBytesArg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uint64Arg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uint8Arg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uintArg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uintArrayArg",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ExampleClone extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExampleCloneInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressArg(overrides?: CallOverrides): Promise<[string]>;

    dynBytesArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fixedBytesArg(overrides?: CallOverrides): Promise<[string]>;

    uint64Arg(overrides?: CallOverrides): Promise<[BigNumber]>;

    uint8Arg(overrides?: CallOverrides): Promise<[number]>;

    uintArg(overrides?: CallOverrides): Promise<[BigNumber]>;

    uintArrayArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  addressArg(overrides?: CallOverrides): Promise<string>;

  dynBytesArg(
    arrLen: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fixedBytesArg(overrides?: CallOverrides): Promise<string>;

  uint64Arg(overrides?: CallOverrides): Promise<BigNumber>;

  uint8Arg(overrides?: CallOverrides): Promise<number>;

  uintArg(overrides?: CallOverrides): Promise<BigNumber>;

  uintArrayArg(
    arrLen: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    addressArg(overrides?: CallOverrides): Promise<string>;

    dynBytesArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fixedBytesArg(overrides?: CallOverrides): Promise<string>;

    uint64Arg(overrides?: CallOverrides): Promise<BigNumber>;

    uint8Arg(overrides?: CallOverrides): Promise<number>;

    uintArg(overrides?: CallOverrides): Promise<BigNumber>;

    uintArrayArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    addressArg(overrides?: CallOverrides): Promise<BigNumber>;

    dynBytesArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedBytesArg(overrides?: CallOverrides): Promise<BigNumber>;

    uint64Arg(overrides?: CallOverrides): Promise<BigNumber>;

    uint8Arg(overrides?: CallOverrides): Promise<BigNumber>;

    uintArg(overrides?: CallOverrides): Promise<BigNumber>;

    uintArrayArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressArg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dynBytesArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedBytesArg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uint64Arg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uint8Arg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uintArg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uintArrayArg(
      arrLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
