/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FaultDisputeGameInterface extends utils.Interface {
  functions: {
    "attack(uint256,bytes32)": FunctionFragment;
    "bondManager()": FunctionFragment;
    "claimData(uint256)": FunctionFragment;
    "createdAt()": FunctionFragment;
    "defend(uint256,bytes32)": FunctionFragment;
    "extraData()": FunctionFragment;
    "gameData()": FunctionFragment;
    "gameStart()": FunctionFragment;
    "gameType()": FunctionFragment;
    "initialize()": FunctionFragment;
    "resolve()": FunctionFragment;
    "rootClaim()": FunctionFragment;
    "status()": FunctionFragment;
    "step(uint256,uint256,bytes,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attack"
      | "bondManager"
      | "claimData"
      | "createdAt"
      | "defend"
      | "extraData"
      | "gameData"
      | "gameStart"
      | "gameType"
      | "initialize"
      | "resolve"
      | "rootClaim"
      | "status"
      | "step"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defend",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "extraData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameStart", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootClaim", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "step",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Move(uint256,bytes32,address)": EventFragment;
    "Resolved(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
}

export interface MoveEventObject {
  parentIndex: BigNumber;
  pivot: string;
  claimant: string;
}
export type MoveEvent = TypedEvent<
  [BigNumber, string, string],
  MoveEventObject
>;

export type MoveEventFilter = TypedEventFilter<MoveEvent>;

export interface ResolvedEventObject {
  status: number;
}
export type ResolvedEvent = TypedEvent<[number], ResolvedEventObject>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface FaultDisputeGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaultDisputeGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attack(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondManager(overrides?: CallOverrides): Promise<[string]>;

    claimData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber, BigNumber] & {
        parentIndex: number;
        countered: boolean;
        claim: string;
        position: BigNumber;
        clock: BigNumber;
      }
    >;

    createdAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { createdAt_: BigNumber }>;

    defend(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extraData(
      overrides?: CallOverrides
    ): Promise<[string] & { extraData_: string }>;

    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    gameStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameType(
      overrides?: CallOverrides
    ): Promise<[number] & { gameType_: number }>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rootClaim(
      overrides?: CallOverrides
    ): Promise<[string] & { rootClaim_: string }>;

    status(overrides?: CallOverrides): Promise<[number]>;

    step(
      _prestateIndex: PromiseOrValue<BigNumberish>,
      _parentIndex: PromiseOrValue<BigNumberish>,
      _stateData: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(
      overrides?: CallOverrides
    ): Promise<[string] & { version_: string }>;
  };

  attack(
    _parentIndex: PromiseOrValue<BigNumberish>,
    _pivot: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondManager(overrides?: CallOverrides): Promise<string>;

  claimData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, string, BigNumber, BigNumber] & {
      parentIndex: number;
      countered: boolean;
      claim: string;
      position: BigNumber;
      clock: BigNumber;
    }
  >;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  defend(
    _parentIndex: PromiseOrValue<BigNumberish>,
    _pivot: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extraData(overrides?: CallOverrides): Promise<string>;

  gameData(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      gameType_: number;
      rootClaim_: string;
      extraData_: string;
    }
  >;

  gameStart(overrides?: CallOverrides): Promise<BigNumber>;

  gameType(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rootClaim(overrides?: CallOverrides): Promise<string>;

  status(overrides?: CallOverrides): Promise<number>;

  step(
    _prestateIndex: PromiseOrValue<BigNumberish>,
    _parentIndex: PromiseOrValue<BigNumberish>,
    _stateData: PromiseOrValue<BytesLike>,
    _proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    attack(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondManager(overrides?: CallOverrides): Promise<string>;

    claimData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber, BigNumber] & {
        parentIndex: number;
        countered: boolean;
        claim: string;
        position: BigNumber;
        clock: BigNumber;
      }
    >;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    defend(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    extraData(overrides?: CallOverrides): Promise<string>;

    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    gameStart(overrides?: CallOverrides): Promise<BigNumber>;

    gameType(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    resolve(overrides?: CallOverrides): Promise<number>;

    rootClaim(overrides?: CallOverrides): Promise<string>;

    status(overrides?: CallOverrides): Promise<number>;

    step(
      _prestateIndex: PromiseOrValue<BigNumberish>,
      _parentIndex: PromiseOrValue<BigNumberish>,
      _stateData: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Move(uint256,bytes32,address)"(
      parentIndex?: PromiseOrValue<BigNumberish> | null,
      pivot?: PromiseOrValue<BytesLike> | null,
      claimant?: PromiseOrValue<string> | null
    ): MoveEventFilter;
    Move(
      parentIndex?: PromiseOrValue<BigNumberish> | null,
      pivot?: PromiseOrValue<BytesLike> | null,
      claimant?: PromiseOrValue<string> | null
    ): MoveEventFilter;

    "Resolved(uint8)"(
      status?: PromiseOrValue<BigNumberish> | null
    ): ResolvedEventFilter;
    Resolved(status?: PromiseOrValue<BigNumberish> | null): ResolvedEventFilter;
  };

  estimateGas: {
    attack(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondManager(overrides?: CallOverrides): Promise<BigNumber>;

    claimData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    defend(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extraData(overrides?: CallOverrides): Promise<BigNumber>;

    gameData(overrides?: CallOverrides): Promise<BigNumber>;

    gameStart(overrides?: CallOverrides): Promise<BigNumber>;

    gameType(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rootClaim(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    step(
      _prestateIndex: PromiseOrValue<BigNumberish>,
      _parentIndex: PromiseOrValue<BigNumberish>,
      _stateData: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defend(
      _parentIndex: PromiseOrValue<BigNumberish>,
      _pivot: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rootClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step(
      _prestateIndex: PromiseOrValue<BigNumberish>,
      _parentIndex: PromiseOrValue<BigNumberish>,
      _stateData: PromiseOrValue<BytesLike>,
      _proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
