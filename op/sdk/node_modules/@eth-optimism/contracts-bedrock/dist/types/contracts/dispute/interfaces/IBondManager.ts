/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IBondManagerInterface extends utils.Interface {
  functions: {
    "post(bytes32,address,uint128)": FunctionFragment;
    "reclaim(bytes32)": FunctionFragment;
    "seize(bytes32)": FunctionFragment;
    "seizeAndSplit(bytes32,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "post" | "reclaim" | "seize" | "seizeAndSplit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "post",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAndSplit",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seizeAndSplit",
    data: BytesLike
  ): Result;

  events: {
    "BondPosted(bytes32,address,uint256,uint256)": EventFragment;
    "BondReclaimed(bytes32,address,uint256)": EventFragment;
    "BondSeized(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondSeized"): EventFragment;
}

export interface BondPostedEventObject {
  bondId: string;
  owner: string;
  expiration: BigNumber;
  amount: BigNumber;
}
export type BondPostedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BondPostedEventObject
>;

export type BondPostedEventFilter = TypedEventFilter<BondPostedEvent>;

export interface BondReclaimedEventObject {
  bondId: string;
  claiment: string;
  amount: BigNumber;
}
export type BondReclaimedEvent = TypedEvent<
  [string, string, BigNumber],
  BondReclaimedEventObject
>;

export type BondReclaimedEventFilter = TypedEventFilter<BondReclaimedEvent>;

export interface BondSeizedEventObject {
  bondId: string;
  owner: string;
  seizer: string;
  amount: BigNumber;
}
export type BondSeizedEvent = TypedEvent<
  [string, string, string, BigNumber],
  BondSeizedEventObject
>;

export type BondSeizedEventFilter = TypedEventFilter<BondSeizedEvent>;

export interface IBondManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBondManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    post(
      _bondId: PromiseOrValue<BytesLike>,
      _bondOwner: PromiseOrValue<string>,
      _minClaimHold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reclaim(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seize(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seizeAndSplit(
      _bondId: PromiseOrValue<BytesLike>,
      _claimRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  post(
    _bondId: PromiseOrValue<BytesLike>,
    _bondOwner: PromiseOrValue<string>,
    _minClaimHold: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reclaim(
    _bondId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seize(
    _bondId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seizeAndSplit(
    _bondId: PromiseOrValue<BytesLike>,
    _claimRecipients: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    post(
      _bondId: PromiseOrValue<BytesLike>,
      _bondOwner: PromiseOrValue<string>,
      _minClaimHold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaim(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    seize(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    seizeAndSplit(
      _bondId: PromiseOrValue<BytesLike>,
      _claimRecipients: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BondPosted(bytes32,address,uint256,uint256)"(
      bondId?: null,
      owner?: null,
      expiration?: null,
      amount?: null
    ): BondPostedEventFilter;
    BondPosted(
      bondId?: null,
      owner?: null,
      expiration?: null,
      amount?: null
    ): BondPostedEventFilter;

    "BondReclaimed(bytes32,address,uint256)"(
      bondId?: null,
      claiment?: null,
      amount?: null
    ): BondReclaimedEventFilter;
    BondReclaimed(
      bondId?: null,
      claiment?: null,
      amount?: null
    ): BondReclaimedEventFilter;

    "BondSeized(bytes32,address,address,uint256)"(
      bondId?: null,
      owner?: null,
      seizer?: null,
      amount?: null
    ): BondSeizedEventFilter;
    BondSeized(
      bondId?: null,
      owner?: null,
      seizer?: null,
      amount?: null
    ): BondSeizedEventFilter;
  };

  estimateGas: {
    post(
      _bondId: PromiseOrValue<BytesLike>,
      _bondOwner: PromiseOrValue<string>,
      _minClaimHold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reclaim(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seize(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seizeAndSplit(
      _bondId: PromiseOrValue<BytesLike>,
      _claimRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    post(
      _bondId: PromiseOrValue<BytesLike>,
      _bondOwner: PromiseOrValue<string>,
      _minClaimHold: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reclaim(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seize(
      _bondId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seizeAndSplit(
      _bondId: PromiseOrValue<BytesLike>,
      _claimRecipients: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
