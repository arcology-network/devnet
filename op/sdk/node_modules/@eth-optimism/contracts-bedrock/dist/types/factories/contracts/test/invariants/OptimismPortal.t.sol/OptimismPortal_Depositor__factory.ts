/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  OptimismPortal_Depositor,
  OptimismPortal_DepositorInterface,
} from "../../../../../contracts/test/invariants/OptimismPortal.t.sol/OptimismPortal_Depositor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Vm",
        name: "_vm",
        type: "address",
      },
      {
        internalType: "contract OptimismPortal",
        name: "_portal",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "_gasLimit",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "_isCreation",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "depositTransactionCompletes",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "failedToComplete",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "params",
    outputs: [
      {
        internalType: "uint128",
        name: "prevBaseFee",
        type: "uint128",
      },
      {
        internalType: "uint64",
        name: "prevBoughtGas",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "prevBlockNum",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "resourceConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "maxResourceLimit",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "elasticityMultiplier",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "baseFeeMaxChangeDenominator",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "minimumBaseFee",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "systemTxMaxGas",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maximumBaseFee",
            type: "uint128",
          },
        ],
        internalType: "struct ResourceMetering.ResourceConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200109838038062001098833981016040819052620000349162000270565b603280546001600160a01b038085166001600160a01b03199283161790925560338054928416929091169190911790556200006e62000076565b5050620002af565b600054610100900460ff1615808015620000975750600054600160ff909116105b80620000c75750620000b430620001a860201b620005c51760201c565b158015620000c7575060005460ff166001145b620001305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000154576000805461ff0019166101001790555b6200015e620001b7565b8015620001a5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054610100900460ff16620002245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840162000127565b60408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b0217600155565b6001600160a01b0381168114620001a557600080fd5b600080604083850312156200028457600080fd5b825162000291816200025a565b6020840151909250620002a4816200025a565b809150509250929050565b610dd980620002bf6000396000f3fe60806040526004361061003f5760003560e01c806399fca42f14610044578063cc731b021461008b578063cff0ab9614610110578063fcf963cd146101b1575b600080fd5b34801561005057600080fd5b506033546100769074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b34801561009757600080fd5b506100a06101c6565b6040516100829190600060c08201905063ffffffff80845116835260ff602085015116602084015260ff6040850151166040840152806060850151166060840152806080850151166080840152506fffffffffffffffffffffffffffffffff60a08401511660a083015292915050565b34801561011c57600080fd5b50600154610178906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff9283166020850152911690820152606001610082565b6101c46101bf366004610a75565b610205565b005b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526102006105e1565b905090565b60325473ffffffffffffffffffffffffffffffffffffffff16634c63e562831580610244575073ffffffffffffffffffffffffffffffffffffffff8716155b801561025457506201d4c0835111155b6040518263ffffffff1660e01b8152600401610274911515815260200190565b60006040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b5050505060006102c48560006fffffffffffffffffffffffffffffffff801661069c565b6032546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063c88a5e6d90604401600060405180830381600087803b15801561033757600080fd5b505af115801561034b573d6000803e3d6000fd5b50505050600047905060006103628360008461069c565b90506000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff0ab966040518163ffffffff1660e01b8152600401606060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610ba4565b5091505060006104056101c6565b805160335488516040517fa35d99df00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff918216600482015293945063ffffffff909216926000926104e292908d169173ffffffffffffffffffffffffffffffffffffffff9091169063a35d99df90602401602060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190610c06565b67ffffffffffffffff168667ffffffffffffffff16856104dd9190610c52565b61069c565b9050603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9e05c42868e88858e8e6040518763ffffffff1660e01b8152600401610548959493929190610ce3565b6000604051808303818588803b15801561056157600080fd5b505af193505050508015610573575060015b6105b757603380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052906106966040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526301312d008152600a6020820152600891810191909152633b9aca006060820152620f424060808201526fffffffffffffffffffffffffffffffff60a082015290565b92915050565b60006106a98484846106f1565b90506106ea6040518060400160405280600c81526020017f426f756e6420526573756c7400000000000000000000000000000000000000008152508261092d565b9392505050565b600081831115610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156107975750818411155b156107a35750826106ea565b60006107af8484610c52565b6107ba906001610d3b565b9050600385111580156107cc57508481115b156107e3576107db8585610d3b565b9150506106ea565b61080e60037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610c52565b85101580156108455750610842857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610c52565b81115b1561087e57610874857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610c52565b6107db9084610c52565b828511156108d45760006108928487610c52565b905060006108a08383610d53565b9050806000036108b5578493505050506106ea565b60016108c18288610d3b565b6108cb9190610c52565b93505050610925565b838510156109255760006108e88686610c52565b905060006108f68383610d53565b90508060000361090b578593505050506106ea565b6109158186610c52565b610920906001610d3b565b935050505b509392505050565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff168383604051602401610964929190610d8e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052516109e59190610db0565b600060405180830381855afa9150503d8060008114610a20576040519150601f19603f3d011682016040523d82523d6000602084013e610a25565b606091505b505050505050565b67ffffffffffffffff81168114610a4357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600060a08688031215610a8d57600080fd5b853573ffffffffffffffffffffffffffffffffffffffff81168114610ab157600080fd5b9450602086013593506040860135610ac881610a2d565b925060608601358015158114610add57600080fd5b9150608086013567ffffffffffffffff80821115610afa57600080fd5b818801915088601f830112610b0e57600080fd5b813581811115610b2057610b20610a46565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610b6657610b66610a46565b816040528281528b6020848701011115610b7f57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b600080600060608486031215610bb957600080fd5b83516fffffffffffffffffffffffffffffffff81168114610bd957600080fd5b6020850151909350610bea81610a2d565b6040850151909250610bfb81610a2d565b809150509250925092565b600060208284031215610c1857600080fd5b81516106ea81610a2d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610c6457610c64610c23565b500390565b60005b83811015610c84578181015183820152602001610c6c565b83811115610c93576000848401525b50505050565b60008151808452610cb1816020860160208601610c69565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015267ffffffffffffffff84166040820152821515606082015260a060808201526000610d3060a0830184610c99565b979650505050505050565b60008219821115610d4e57610d4e610c23565b500190565b600082610d89577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b604081526000610da16040830185610c99565b90508260208301529392505050565b60008251610dc2818460208701610c69565b919091019291505056fea164736f6c634300080f000a";

type OptimismPortal_DepositorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimismPortal_DepositorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimismPortal_Depositor__factory extends ContractFactory {
  constructor(...args: OptimismPortal_DepositorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vm: PromiseOrValue<string>,
    _portal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OptimismPortal_Depositor> {
    return super.deploy(
      _vm,
      _portal,
      overrides || {}
    ) as Promise<OptimismPortal_Depositor>;
  }
  override getDeployTransaction(
    _vm: PromiseOrValue<string>,
    _portal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vm, _portal, overrides || {});
  }
  override attach(address: string): OptimismPortal_Depositor {
    return super.attach(address) as OptimismPortal_Depositor;
  }
  override connect(signer: Signer): OptimismPortal_Depositor__factory {
    return super.connect(signer) as OptimismPortal_Depositor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimismPortal_DepositorInterface {
    return new utils.Interface(_abi) as OptimismPortal_DepositorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimismPortal_Depositor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OptimismPortal_Depositor;
  }
}
