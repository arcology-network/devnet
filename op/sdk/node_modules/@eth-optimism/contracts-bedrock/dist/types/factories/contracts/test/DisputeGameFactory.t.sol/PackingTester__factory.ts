/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  PackingTester,
  PackingTesterInterface,
} from "../../../../contracts/test/DisputeGameFactory.t.sol/PackingTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "Hash",
        name: "uuid",
        type: "bytes32",
      },
    ],
    name: "GameAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
    ],
    name: "NoImplementation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "disputeProxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "Claim",
        name: "rootClaim",
        type: "bytes32",
      },
    ],
    name: "DisputeGameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "impl",
        type: "address",
      },
      {
        indexed: true,
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
    ],
    name: "ImplementationSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
      {
        internalType: "Claim",
        name: "rootClaim",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "create",
    outputs: [
      {
        internalType: "contract IDisputeGame",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "gameAtIndex",
    outputs: [
      {
        internalType: "contract IDisputeGame",
        name: "proxy_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gameCount",
    outputs: [
      {
        internalType: "uint256",
        name: "gameCount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "",
        type: "uint8",
      },
    ],
    name: "gameImpls",
    outputs: [
      {
        internalType: "contract IDisputeGame",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "_gameType",
        type: "uint8",
      },
      {
        internalType: "Claim",
        name: "_rootClaim",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    name: "games",
    outputs: [
      {
        internalType: "contract IDisputeGame",
        name: "proxy_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
      {
        internalType: "Claim",
        name: "rootClaim",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "getGameUUID",
    outputs: [
      {
        internalType: "Hash",
        name: "_uuid",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_num",
        type: "uint256",
      },
    ],
    name: "packSlot",
    outputs: [
      {
        internalType: "GameId",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "GameType",
        name: "gameType",
        type: "uint8",
      },
      {
        internalType: "contract IDisputeGame",
        name: "impl",
        type: "address",
      },
    ],
    name: "setImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "GameId",
        name: "_slot",
        type: "bytes32",
      },
    ],
    name: "unpackSlot",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506200001e600062000024565b62000292565b600054610100900460ff1615808015620000455750600054600160ff909116105b8062000075575062000062306200016260201b620009721760201c565b15801562000075575060005460ff166001145b620000de5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000102576000805461ff0019166101001790555b6200010c62000171565b6200011782620001d9565b80156200015e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b600054610100900460ff16620001cd5760405162461bcd60e51b815260206004820152602b6024820152600080516020620012ea83398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d5565b620001d76200022b565b565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620002875760405162461bcd60e51b815260206004820152602b6024820152600080516020620012ea83398151915260448201526a6e697469616c697a696e6760a81b6064820152608401620000d5565b620001d733620001d9565b61104880620002a26000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c4d66de811610066578063c4d66de8146102dc578063c9bb02f3146102ef578063dfa162d314610302578063f2fde38b1461033857600080fd5b80638da5cb5b14610298578063bb8aa1fc146102b6578063c49d5271146102c957600080fd5b80634d1975b4116100c85780634d1975b4146101ee5780634ee4d5c2146101f657806354fd4d5014610251578063715018a61461029057600080fd5b806326daafbe146100ef5780633142e55e146101a157806345583b7a146101d9575b600080fd5b61018e6100fd366004610d39565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0810180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0830180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08086018051988652968352606087529451609f0190941683209190925291905291905290565b6040519081526020015b60405180910390f35b6101b46101af366004610e22565b61034b565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610198565b6101ec6101e7366004610ecb565b6105a7565b005b60675461018e565b610225610204366004610f02565b73ffffffffffffffffffffffffffffffffffffffff81169160a09190911c90565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610198565b604080518082018252600581527f302e302e32000000000000000000000000000000000000000000000000000000602082015290516101989190610f1b565b6101ec61062e565b60335473ffffffffffffffffffffffffffffffffffffffff166101b4565b6102256102c4366004610f02565b610642565b6102256102d7366004610e22565b61068c565b6101ec6102ea366004610f8e565b61070a565b61018e6102fd366004610fab565b6108a6565b6101b4610310366004610fd7565b60656020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101ec610346366004610f8e565b6108bb565b60ff841660009081526065602052604081205473ffffffffffffffffffffffffffffffffffffffff16806103b5576040517f44265d6f00000000000000000000000000000000000000000000000000000000815260ff871660048201526024015b60405180910390fd5b6104188585856040516020016103cd93929190610ff2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff83169061098e565b91508173ffffffffffffffffffffffffffffffffffffffff16638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b5050505060006104bd878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100fd92505050565b60008181526066602052604090205490915015610509576040517f014f6fe5000000000000000000000000000000000000000000000000000000008152600481018290526024016103ac565b60004260a01b8417600083815260666020526040808220839055606780546001810182559083527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0183905551919250889160ff8b169173ffffffffffffffffffffffffffffffffffffffff8816917ffad0599ff449d8d9685eadecca8cb9e00924c5fd8367c1c09469824939e1ffec9190a4505050949350505050565b6105af610ac2565b60ff821660008181526065602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616908117909155905190917f623713f72f6e427a8044bb8b3bd6834357cf285decbaa21bcc73c1d0632c4d8491a35050565b610636610ac2565b6106406000610b43565b565b60008060006067848154811061065a5761065a61100c565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff81169560a09190911c945092505050565b60008060006106d2878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100fd92505050565b60009081526066602052604090205473ffffffffffffffffffffffffffffffffffffffff81169860a09190911c975095505050505050565b600054610100900460ff161580801561072a5750600054600160ff909116105b806107445750303b158015610744575060005460ff166001145b6107d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103ac565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561082e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610836610bba565b61083f82610b43565b80156108a257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006108b4838360a01b1790565b9392505050565b6108c3610ac2565b73ffffffffffffffffffffffffffffffffffffffff8116610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103ac565b61096f81610b43565b50565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60006002825101603f8101600a81036040518360581b8260e81b177f6100003d81600a3d39f3363d3d373d3d3d3d610000806035363936013d7300001781528660601b601e8201527f5af43d3d93803e603357fd5bf300000000000000000000000000000000000000603282015285519150603f8101602087015b60208410610a4657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09093019260209182019101610a09565b517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602085900360031b1b16815260f085901b9083015282816000f0945084610ab3577febfef1880000000000000000000000000000000000000000000000000000000060005260206000fd5b90910160405250909392505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ac565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610c51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ac565b610640600054610100900460ff16610ceb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ac565b61064033610b43565b803560ff81168114610d0557600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215610d4e57600080fd5b610d5784610cf4565b925060208401359150604084013567ffffffffffffffff80821115610d7b57600080fd5b818601915086601f830112610d8f57600080fd5b813581811115610da157610da1610d0a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610de757610de7610d0a565b81604052828152896020848701011115610e0057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060008060608587031215610e3857600080fd5b610e4185610cf4565b935060208501359250604085013567ffffffffffffffff80821115610e6557600080fd5b818701915087601f830112610e7957600080fd5b813581811115610e8857600080fd5b886020828501011115610e9a57600080fd5b95989497505060200194505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461096f57600080fd5b60008060408385031215610ede57600080fd5b610ee783610cf4565b91506020830135610ef781610ea9565b809150509250929050565b600060208284031215610f1457600080fd5b5035919050565b600060208083528351808285015260005b81811015610f4857858101830151858201604001528201610f2c565b81811115610f5a576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215610fa057600080fd5b81356108b481610ea9565b60008060408385031215610fbe57600080fd5b8235610fc981610ea9565b946020939093013593505050565b600060208284031215610fe957600080fd5b6108b482610cf4565b838152818360208301376000910160200190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c634300080f000a496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069";

type PackingTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PackingTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PackingTester__factory extends ContractFactory {
  constructor(...args: PackingTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PackingTester> {
    return super.deploy(overrides || {}) as Promise<PackingTester>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PackingTester {
    return super.attach(address) as PackingTester;
  }
  override connect(signer: Signer): PackingTester__factory {
    return super.connect(signer) as PackingTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PackingTesterInterface {
    return new utils.Interface(_abi) as PackingTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PackingTester {
    return new Contract(address, _abi, signerOrProvider) as PackingTester;
  }
}
