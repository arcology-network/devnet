import { ethers, Contract } from 'ethers';
import { Provider } from '@ethersproject/abstract-provider';
import { Signer } from '@ethersproject/abstract-signer';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import 'hardhat-deploy';
import '@eth-optimism/hardhat-deploy-config';
import '@nomiclabs/hardhat-ethers';
export declare const deploy: ({ hre, name, iface, args, contract, postDeployAction, }: {
    hre: HardhatRuntimeEnvironment;
    name: string;
    args: any[];
    contract?: string;
    iface?: string;
    postDeployAction?: (contract: Contract) => Promise<void>;
}) => Promise<Contract>;
export declare const asAdvancedContract: (opts: {
    contract: Contract;
    confirmations?: number;
    gasPrice?: number;
}) => Contract;
export declare const getContractFromArtifact: (hre: HardhatRuntimeEnvironment, name: string, opts?: {
    iface?: string;
    signerOrProvider?: Signer | Provider | string;
}) => Promise<ethers.Contract>;
export declare const getContractsFromArtifacts: (hre: HardhatRuntimeEnvironment, configs: Array<{
    name: string;
    iface?: string;
    signerOrProvider?: Signer | Provider | string;
}>) => Promise<ethers.Contract[]>;
export declare const assertContractVariable: (contract: ethers.Contract, variable: string, expected: any) => Promise<void>;
export declare const getDeploymentAddress: (hre: HardhatRuntimeEnvironment, name: string) => Promise<string>;
export declare const printJsonTransaction: (tx: ethers.PopulatedTransaction) => void;
export declare const doOwnershipTransfer: (opts: {
    isLiveDeployer?: boolean;
    proxy: ethers.Contract;
    name: string;
    transferFunc: string;
    target: ethers.Contract;
}) => Promise<void>;
export declare const liveDeployer: (opts: {
    hre: HardhatRuntimeEnvironment;
    disabled: string | undefined;
}) => Promise<boolean>;
export declare const printTenderlySimulationLink: (provider: ethers.providers.Provider, tx: ethers.PopulatedTransaction) => Promise<void>;
export declare const printCastCommand: (tx: ethers.PopulatedTransaction) => void;
