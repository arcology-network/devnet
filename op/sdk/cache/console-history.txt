tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x055624984049310c17d9810cb4745828f16c509cf6a825c7e65364fe0105582a'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet() 
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc") 
Greeter = await ethers.getContractFactory("Greeter")
tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x9b3463c0e68735a540c561e68237e486e46166dc59a2418f4d63d095eb8e9ed4'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x9c6e8d72ff6dd24ed55678c5642248a1020b7772d1c2089739878aac8b8242c2'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0xb8a46641246418b4141917034f0f7a8cbb11e9364aeafaa2cdc8839e8a8228d7'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x46ade46a5b8786544fbda5c951310b87d1736c80e444a8b62550bd9482b437b7'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
rcpt = await tx.wait()
tx = await crossChainMessenger.finalizeMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_FOR_RELAY
rcpt = await tx.wait()
tx = await crossChainMessenger.proveMessage(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x305f982f30e5eb8bdae003f1d2912748d3915423cca94967d24e544bd231ece1'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 42069,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x36f4b91901fc820bb3d45af3aaeeadd04a74ee5c33829705586844e50dc0596d'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 42069,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0xc21c1c3728a261668c047fbcbacbac73823525e9f72ac2f9ae0241d22f9f9a1b'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 42069,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()  
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
sdk.MessageStatus.READY_TO_PROVE
await crossChainMessenger.getMessageStatus(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0xabe37951057c100675c8bc99187ab923526efb388980fb0b39e58448a34c3afd'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xCEDB63E3e28f25979592a0a605cB9d4D688AD1a1")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x318d26901552498ad1c51be03d3abe2b666c227c51734d8ea4ae042aa4cae165'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x4cddb0a66956ff877dfdb27663cc3381606cde83a08f49759447d83064ccabc3'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet() 
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0xa0047b0545d41ddad9d115e65a8a7a39a4cae19b5f807e3cc17ba02f7963d6b0'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x893f6fb26aada7aef50a776b45616113c70e08c71943f2ffa6e87d780912b601'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet() 
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
sdk.MessageStatus.READY_TO_PROVE
await crossChainMessenger.getMessageStatus(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x22de4bf60faf95eb35b8161d1bed43d13e9a0da4955d4febffb539d06d4e856f'
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0x805A8E1F87Bbbe64af033bEda004EEde17fdFcbd")
Greeter = await ethers.getContractFactory("Greeter")
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
sdk.MessageStatus.READY_TO_PROVE
await crossChainMessenger.getMessageStatus(hash)
(await crossChainMessenger.getMessageStatus(hash)) == sdk.MessageStatus.READY_TO_PROVE
hash = '0x121d18efb581f7ea5a72c3714b4694cb5168e34726a9a9f243203c057f3a5c8b'
hash =0x121d18efb581f7ea5a72c3714b4694cb5168e34726a9a9f243203c057f3a5c8b
	})
		}
			l2: sdk.DEFAULT_L2_CONTRACT_ADDRESSES,
			},
				"L2OutputOracle": "0x10Dcd71c5FE8c1B90DA9E9c624A9F23240b783C4"
				"OptimismPortal": "0x471EdBc375D23ca7e6d2C2149E412f28cC9FB66e",
				"L1StandardBridge": "0x17c220049684941D53384256AA0de6Be778610bD",
				"L1CrossDomainMessenger": "0x7BFE0A21796937d7E5cB1d51f433432E62aCebC0",
				"BondManager": "0x0000000000000000000000000000000000000000",
				"CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
				"StateCommitmentChain": "0x0000000000000000000000000000000000000000",
				"AddressManager": "0x363c9413c03901aA327d250d819237DE6b0280dd",
			l1: {
		contracts: {
		bedrock: true,
		l2SignerOrProvider: l2Provider,
		l1SignerOrProvider: l1Signer, 
		l2ChainId: 118,
		l1ChainId: 100,
crossChainMessenger = new sdk.CrossChainMessenger({ 
l1Signer = await ethers.getSigner()
l2Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.131:8545")
l1Provider = new ethers.providers.JsonRpcProvider("http://192.168.230.137:7545")
sdk = require("@eth-optimism/sdk")
await greeter.greet()
greeter = await Greeter.attach("0xea563ce256583121652ee17E159Ec0A7d83e8cCc")
Greeter = await ethers.getContractFactory("Greeter")
await greeter.greet()
greeter = await Greeter.attach("0x363c9413c03901aA327d250d819237DE6b0280dd")
Greeter = await ethers.getContractFactory("Greeter")
tx = await controller.setGreeting(`Hardhat hello from L1 ${Date()}`)
controller = await Controller.deploy()
Controller = await ethers.getContractFactory("FromL1_ControlL2Greeter")
tx = await controller.setGreeting(`Hardhat hello from L1 ${Date()}`)
controller = await Controller.deploy()
Controller = await ethers.getContractFactory("FromL1_ControlL2Greeter")
await greeter.greet()
greeter = await Greeter.attach("0x634BB195aDDc0A9Ad04546eBf7A4eBfcc554A9c2")
Greeter = await ethers.getContractFactory("Greeter")ontroller = await ethers.getContractFactory("FromL1_ControlL2Greeter")
await greeter.greet()
greeter = await Greeter.attach("0x634BB195aDDc0A9Ad04546eBf7A4eBfcc554A9c2")
Greeter = await ethers.getContractFactory("Greeter")